#!groovy
pipeline {
	parameters {
		extendedChoice(
			defaultValue: 'Firecrest-latest',
			description: 'VMs',
			multiSelectDelimiter: ',',
			name: 'VM_FILTER',
			quoteValue: false,
			saveJSONParameterToFile: false,
			type: 'PT_CHECKBOX',
			value: 'NS-530,NS-521,Firecrest-latest,Ubuntu18,Ubuntu20',
			visibleItemCount: 5)
		text(name: 'VMC', description: 'VM count',	defaultValue: '1')
		text(name: 'Prefix', description: 'Grouping VMs', defaultValue: 'for-smth')
		choice(name: 'ClusterVar', choices: ['autod','i40','krd'], description: '')
		booleanParam(name: 'MUTisVM', defaultValue: false, description: '')

	}
	agent any
	environment {
		WORKSPACE1 = ""
	}
	stages {
		stage('GitClone') {
			steps {
				script {
					WORKSPACE1 = WORKSPACE
				}
				git branch: 'main', url: 'https://github.com/alexgadetsky/autod-lab.git'
			}
		}
		stage('DeployVMs') {
			matrix {
				when {
					expression { params.VM_FILTER =~ env.VM }
				}
				axes {
					axis {
						name 'VM'
						values 'NS-530', 'NS-521', 'Firecrest-latest', 'Ubuntu20', 'Ubuntu18'
					}
				}
				stages {
					stage('Deploy VM') {
						steps {
							dir("${WORKSPACE1}/ansible") {
								ansiblePlaybook([
									installation:	'ansible',
									inventory:	'inventory',
									playbook:	'pb_lab_manage_vm.yml',
									extras:		"-e @group_vars/${params.ClusterVar}.yml -e vm_name=${env.BUILD_ID}-${params.Prefix}-${VM} -e VMC=${params.VMC} -e MAC_j=MAC_${VM} -e vmtype=${params.Prefix}"
/*									extraVars:	[
										vm_name:	"${env.BUILD_ID}-${params.Prefix}-${VM}",
										VMC:		"${params.VMC}",
										MAC_j:		"MAC_${VM}"
									] */
								])
							}
						}
					}
					stage('Configure Linux VMs - hostname and packages') {
						when {
							expression { env.VM =~ 'Ubuntu'	}
						}
						steps {
							dir("${WORKSPACE1}/ansible") {
								ansiblePlaybook([
									installation:   'ansible',
									credentialsId:	'tcm-root',
									inventory:      "inv.${params.ClusterVar}.vmware.yml",
									playbook:       'pb_lab_manage_vm_hostname.yml',
									extras:		"-l *${env.BUILD_ID}-${params.Prefix}-${VM}*"
								])
							}
						}
					}
					stage('Configure Linux VMs - fsload and fio') {
						when {
							expression { 
								env.VM =~ 'Ubuntu'
								return params.MUTisVM ==~ /(?i)(N|NO|F|FALSE|OFF)/
							}
						}
						steps {
							dir("${WORKSPACE1}/ansible") {
								ansiblePlaybook([
									installation:   'ansible',
									credentialsId:	'tcm-root',
									inventory:      "inv.${params.ClusterVar}.vmware.yml",
									playbook:       'pb_lab_manage_io.yml',
									extras:		"-e @group_vars/${params.ClusterVar}.yml -e vmtype=${params.Prefix} -l *${env.BUILD_ID}-${params.Prefix}-${VM}*"
								])
							}
						}
					}
				}
			}
		}
		stage('NAS configure') {
			when {
				expression { env.VM =~ 'Firecrest' }
				expression { env.Prefix == 'nas' }
				expression { return params.MUTisVM ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
			}
			steps {
				dir("${WORKSPACE1}/ansible") {
					ansiblePlaybook([
						installation:   'ansible',
						credentialsId:	'tcm-root',
						inventory:      "inv.${params.ClusterVar}.vmware.yml",
						playbook:       'pb_lab_nas_test.yml',
						extras:		"-e @group_vars/${params.ClusterVar}.yml -e mut=${env.BUILD_ID}-${params.Prefix}-Firecrest-latest -l *${env.BUILD_ID}-${params.Prefix}*"
					])
				}
			}
		}
		stage('SAN configure') {
			when {
				expression { env.VM =~ 'Firecrest' }
				expression { env.Prefix == 'san' }
				expression { return params.MUTisVM ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
			}
			steps {
				dir("${WORKSPACE1}/ansible") {
					ansiblePlaybook([
						installation:   'ansible',
						credentialsId:	'tcm-root',
						inventory:      "inv.${params.ClusterVar}.vmware.yml",
						playbook:       'pb_lab_san_test.yml',
						extras:		"-e @group_vars/${params.ClusterVar}.yml -e mut=${env.BUILD_ID}-${params.Prefix}-Firecrest-latest -l *${env.BUILD_ID}-${params.Prefix}*"
					])
				}
			}
		}
	}
}

