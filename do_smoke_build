#!groovy
pipeline {
	parameters{
		text(name: 'buildN', description: 'FC build number',	defaultValue: '')
	}
	agent { label 'master' }
	stages {
		when { expression { params.buildN != '' }}
		stage('Do PXE conf') {
			steps {
				build job: 'Firecrest_PXE_conf', wait: true, parameters: [string(name: 'BN', value: "${params.buildN}")]
			}
		}
		stage('Do Smoke') {
			parallel {
				stage('Do NAS Smoke') {
					steps {
						build job: 'AutoD-DeployVMs', wait: true, parameters: [
							extendedChoice(name: 'VM_FILTER', value: 'firecrest,Ubuntu18,Ubuntu20'),
							string(name: 'VMC', value: '1'),
							extendedChoice(name: 'Prefix', value: "FCbuild-${params.buildN}-vmnas"),
							string(name:'ClusterVar', value: 'autod')]
					}
				}
				stage('Do SAN iSCSI Smoke') {
					steps {
						build job: 'AutoD-DeployVMs', wait: true, parameters: [
							extendedChoice(name: 'VM_FILTER', value: 'firecrest,Ubuntu18,Ubuntu20'),
							string(name: 'VMC', value: '1'),
							extendedChoice(name: 'Prefix', value: "FCbuild-${params.buildN}-vmnas"),
							string(name:'ClusterVar', value: 'autod')]
					}
				}
				stage('Do SAN iSCSI CHAP Smoke') {
					steps {
						build job: 'AutoD-DeployVMs', wait: true, parameters: [
							extendedChoice(name: 'VM_FILTER', value: 'firecrest,Ubuntu18,Ubuntu20'),
							string(name: 'VMC', value: '1'),
							extendedChoice(name: 'Prefix', value: "FCbuild-${params.buildN}-vmnaschap"),
							string(name:'ClusterVar', value: 'autod')]
					}
				}
			}
		}
	}
}

