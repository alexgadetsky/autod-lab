---
- name: Deploy and configure VMs
  gather_facts: false
  hosts: localhost
  user: root
  vars_files:
     group_vars/all.yml
  vars:
    patt: "tcm"
    VMC: 1
    MAC: "{{MAC4}}"
    vm_create_sleeper: []
  
  tasks:
  - name: Create a virtual test machine and take IP
    block:
    - set_fact:
        MAC: "{{ lookup('vars', MAC_j)}}"
    - name: Create a FireCrest VM
      community.vmware.vmware_guest:
        hostname: "{{vcenter_hostname}}"
        username: "{{vcenter_username}}"
        password: "{{vcenter_password}}"
        validate_certs: no
        datacenter: "{{datacenter}}"
        cluster: "{{cluster}}"
        folder: "{{folder}}"
        name: "{{vmpref}}-{{vm_name}}"
        state: poweredon
        guest_id: otherGuest64
        disk:
        - size_gb: 20
          type: thin
          datastore: "{{datastore}}"
        - size_gb: 200
          type: thin
          datastore: "{{datastore}}" 
        - size_gb: 200
          type: thin
          datastore: "{{datastore}}" 
        - size_gb: 200
          type: thin
          datastore: "{{datastore}}" 
        - size_gb: 200
          type: thin
          datastore: "{{datastore}}" 
        - size_gb: 200
          type: thin
          datastore: "{{datastore}}" 
        hardware:
          memory_mb: 20480
          num_cpus: 4
          scsi: lsilogic
        networks:
        - name: "{{net_10Gbit}}"
          mac: "{{ MAC | community.general.random_mac }}"
          device_type: vmxnet3
        - name: "{{net_1Gbit}}"
          device_type: vmxnet3
        wait_for_ip_address: yes
        wait_for_ip_address_timeout: 3000
      register: createvm_out

    - name: Get IP
      community.vmware.vmware_guest_info:
        hostname: "{{vcenter_hostname}}"
        username: "{{vcenter_username}}"
        password: "{{vcenter_password}}"
        validate_certs: no
        datacenter: "{{datacenter}}"
        name: "{{vmpref}}-{{vm_name}}"
      register: get_vm_info
    - debug:
         msg: "VM IP is {{get_vm_info.instance.ipv4}}"
    when: "(vm_state is not defined) and ((vm_name | regex_search('Firecrest')) or (vm_name | regex_search('NS')))"

  - name: Create a virtual client machine and take IP
    block:
    - set_fact:
        MAC: "{{ lookup('vars', MAC_j)}}"
    - name: Create a Linux VM
      community.vmware.vmware_guest:
        hostname: "{{vcenter_hostname}}"
        username: "{{vcenter_username}}"
        password: "{{vcenter_password}}"
        validate_certs: no
        datacenter: "{{datacenter}}"
        cluster: "{{cluster}}"
        folder: "{{folder}}"
        name: "{{vmpref}}-{{vm_name}}-{{item}}"
        state: poweredon
        guest_id: otherGuest64
        disk:
        - size_gb: 40
          type: thin
          datastore: "{{datastore}}"
        hardware:
          memory_mb: 4096
          num_cpus: 4
          scsi: paravirtual
        networks:
        - name: "{{net_10Gbit}}"
          device_type: vmxnet3
          mac: "{{ MAC | community.general.random_mac }}"
          #        - name: "{{net_1Gbit}}"
          #          mac: "{{ MAC3 | community.general.random_mac }}"
          #          device_type: vmxnet3
        wait_for_ip_address: yes
        wait_for_ip_address_timeout: 3000
      async: 3000
      poll: 0
      loop: "{{range(1,VMC|int+1) | list }}"
      register: _vm_create_sleeper

    - set_fact:
        vm_create_sleeper: "{{ vm_create_sleeper + _vm_create_sleeper.results }}"

    - name: Wait for asynchronous job to end
      async_status:
        jid: '{{ item.ansible_job_id }}'
      register: job_result
      until: job_result.finished
      retries: 50
      delay: 60
      loop: "{{vm_create_sleeper}}"

    when: "(vm_state is not defined) and ((vm_name | regex_search('Centos')) or (vm_name | regex_search('Ubuntu'))) "

- name: Action
  gather_facts: false
  hosts: all
  user: root
  vars_files:
     group_vars/all.yml
  tasks:
  - name: TCM VMs - "{{vm_state}}"
    community.vmware.vmware_guest:
      hostname: "{{vcenter_hostname}}"
      username: "{{vcenter_username}}"
      password: "{{vcenter_password}}"
      validate_certs: no
      datacenter: "{{datacenter}}"
      folder: "{{folder}}"
      name: "{{inventory_hostname}}"
      state: "{{vm_state}}"
      force: yes
    delegate_to: localhost
    when: vm_state is defined

