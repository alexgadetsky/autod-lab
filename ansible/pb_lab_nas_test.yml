---
- name: Deploy and configure VMs
  gather_facts: false
  hosts: localhost
  user: root
  vars_files:
     group_vars/autod.yml
  vars:
    VMC: 1
    MAC: "{{MAC4}}"
    vm_create_sleeper: []
  
  tasks:
  - name: Create a virtual test machine and take IP
    block:
    - set_fact:
        MAC: "{{ lookup('vars', MAC_j)}}"
    - name: Create a FireCrest VM
      community.vmware.vmware_guest:
        hostname: "{{vcenter_hostname}}"
        username: "{{vcenter_username}}"
        password: "{{vcenter_password}}"
        validate_certs: no
        datacenter: "{{datacenter}}"
        cluster: "{{cluster}}"
        folder: "{{folder}}"
        name: "{{vmpref}}-{{vm_name}}"
        state: poweredon
        guest_id: otherGuest64
        disk:
        - size_gb: 20
          type: thin
          datastore: "{{datastore}}"
        - size_gb: 10
          type: thin
          datastore: "{{datastore}}" 
        - size_gb: 10
          type: thin
          datastore: "{{datastore}}" 
        - size_gb: 10
          type: thin
          datastore: "{{datastore}}" 
        - size_gb: 10
          type: thin
          datastore: "{{datastore}}" 
        hardware:
          memory_mb: 10240
          num_cpus: 4
          scsi: lsilogic
        networks:
        - name: "{{net_10Gbit}}"
          mac: "{{ MAC | community.general.random_mac }}"
          device_type: vmxnet3
        - name: "{{net_1Gbit}}"
          device_type: vmxnet3
        wait_for_ip_address: yes
        wait_for_ip_address_timeout: 3000
    when: "(vm_state is not defined) and ((vm_name | regex_search('Firecrest')) or (vm_name | regex_search('NS')))"

  - name: Create a virtual client machine and take IP
    block:
    - set_fact:
        MAC: "{{ lookup('vars', MAC_j)}}"
    - name: Create a Linux VM
      community.vmware.vmware_guest:
        hostname: "{{vcenter_hostname}}"
        username: "{{vcenter_username}}"
        password: "{{vcenter_password}}"
        validate_certs: no
        datacenter: "{{datacenter}}"
        cluster: "{{cluster}}"
        folder: "{{folder}}"
        name: "{{vmpref}}-{{vm_name}}-{{item}}"
        state: poweredon
        guest_id: otherGuest64
        disk:
        - size_gb: 40
          type: thin
          datastore: "{{datastore}}"
        hardware:
          memory_mb: 4096
          num_cpus: 4
          scsi: paravirtual
        networks:
        - name: "{{net_10Gbit}}"
          device_type: vmxnet3
          mac: "{{ MAC | community.general.random_mac }}"
        - name: "{{net_1Gbit}}"
          mac: "{{ MAC3 | community.general.random_mac }}"
          device_type: vmxnet3
        wait_for_ip_address: yes
        wait_for_ip_address_timeout: 3000
      async: 3000
      poll: 0
      loop: "{{range(1,VMC|int+1) | list }}"
      register: _vm_create_sleeper

    - set_fact:
        vm_create_sleeper: "{{ vm_create_sleeper + _vm_create_sleeper.results }}"

    - name: Wait for asynchronous job to end
      async_status:
        jid: '{{ item.ansible_job_id }}'
      register: job_result
      until: job_result.finished
      retries: 50
      delay: 60
      loop: "{{vm_create_sleeper}}"

    when: "(vm_state is not defined) and ((vm_name | regex_search('Centos')) or (vm_name | regex_search('Ubuntu'))) "

- name: Configure VM
  gather_facts: false
  hosts: all
  user: root
  vars_files:
     group_vars/autod.yml
  tasks:
   - name: Wait 1200 seconds
     wait_for_connection:
       timeout: 1200

   - name: gather_facts
     setup:

   - block:
     - set_fact:
         mut: "{{inventory_hostname}}"
         cacheable: yes

     - name: Configure storate - create pool
       shell: zpool create -f data mirror c2t1d0 c2t2d0

     - name: Configure storate - create datasets for NFS
       shell: "zfs create data/{{item}}"
       loop:
         - nfs3
         - nfs4
         - nfs41

     - name: Configure storate - create NFS shares
       shell: "zfs set sharenfs=on data/{{item}}"
       loop:
         - nfs3
         - nfs4
         - nfs41

     - name: Configure storate - create dataset for SMB2
       shell: zfs create data/smb2

     - name: Configure storate - create SMB2 share
       shell: zfs set sharesmb=on data/smb2

     - name: shareall
       shell: shareall
     when: "{{vm_name | regex_search('Firecrest')}}"

   - block: 
     - name: Set a hostname
       hostname:
         name: "{{inventory_hostname}}"

     - name: include install linux pkgs
       import_tasks: includes/install_linux.yml

     - name: Create the mount point
       file:
         path: "/mnt/nas/{{item}}"
         state: directory
         mode: 0777
         recurse: yes
       loop:
          - nfs3
          - nfs4
          - nfs41

     - name: Wait 300 seconds for mut port 22 to become open
       wait_for:
         port: 22
         host: "{{hostvars['mut'][ansible_default_ipv4.address]}}"
         search_regex: OpenSSH
         delay: 10

     - name: Mount share NFS v3 and v4
       mount:
         name: "/mnt/nas/nfs{{item}}"
         src: "{{hostvars['mut'][ansible_default_ipv4.address]}}:/data/nfs{{item}}"
         fstype: nfs
         opts: "rw,sync,nfsvers={{item}}"
         state: mounted
       loop:
          - 3
          - 4

     - name: Mount share NFSv4.1
       mount:
         name: "/mnt/nas/nfs{{item}}"
         src: "{{hostvars['mut'][ansible_default_ipv4.address]}}:/data/nfs{{item}}"
         fstype: nfs
         opts: "rw,sync"
         state: mounted
 
     - name: Copy fio conf
       template:
         src: fio.wk
         dest: /root/fio.wk
     - name: Run fio
       shell: fio /root/fio.wk | tee /root/fio.out
       async: 10000
       poll: 0

     when: ansible_system == 'Linux'
 
